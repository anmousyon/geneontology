{
    "collab_server" : "",
    "contents" : "findLCA<-function(term1, term2) {\n  tryCatch ({\n  ##if both of the genes exist?\n  if (length(get(term1,ontoenv))>0 && length(get(term2,ontoenv))>0) {\n    ##get gene from graph\n    g1 <- oneGOGraph(term1, parents)\n    sg1 <- subGraph(c(get(term1, ontoenv), term1), g1)\n    ##get next gene from graph\n    g2 <- oneGOGraph(term2, parents)\n    sg2 <- subGraph(c(get(term2, ontoenv), term2), g2)\n    ##create a pseudo-gene using subgraphs of last two?\n    g3 <- join(sg1, sg2)\n    ##find all ancestors of gene one\n    anc1<-union(ancestors[[term1]],term1)\n    ##fins all ancestors of gene two\n    anc2<-union(ancestors[[term2]],term2)\n    ##find common ancestors for each gene\n    commonAncestors <- intersect(anc1, anc2)\n    ##subtract all ancestors from list which are chared by all\n    commonAncestors<-commonAncestors[-which(commonAncestors==\"all\")]\n    ##get the depth of the gene in the subgraph\n    dist1 = dijkstra.sp(sg1,term1)$distances[commonAncestors]\n    ##get the depth of the gene in the subgraph\n    dist2 = dijkstra.sp(sg2,term2)$distances[commonAncestors]\n    ##combine their distances\n    dist <- dist1 + dist2\n    ##if they are not both the root\n    if (length(dist)>0){ \n      ##get the least common ancestors\n      lca <- names(dist[which(dist==min(dist))])\n    }\n    ##this could cause a problem if they are both root state since lca isnt defined it they are\n    ##if they have more than one shared ancestor\n    if (length(lca) > 1) {\n      # find lowest lca i.e. with greatest depth\n      depths <- sapply(lca, findDepth)\n      maxind <- which(depths==max(depths))[1]\n      lca[maxind]\n    }\n    ##otherwise use the only one we have (what if they dont have one from an error?)\n    else {\n      lca\n    }\n  }\n  ##otherwise use the root as the lca (guarranteed to be an ancestor of both by nature of graph)\n  else\n    rootTerm\n  }, error=function(e) {\n    rootTerm\n  })\n}\n\nfindDepth<-function(term) {\n  tryCatch ({\n  ##get gene from graph\n  g1 <- oneGOGraph(term, parents)\n  sg <- subGraph(c(get(term, ontoenv), term), g1)\n  ##find depth of the gene in the graph using dijkstras alg\n  depth <-  dijkstra.sp(sg, term)$distances[rootTerm]\n  ##convert to integer\n  as.integer(depth)\n  }, error=function(e){\n      -1\n  })\n}\n\nfindOffspringCount<-function(term) {\n  ##count the number of children the gene has\n  count<- offspring[term]\n  if(!is.na(count))\n    length(unlist(count))\n  else\n    0\n}",
    "created" : 1474911986656.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2277366322",
    "id" : "F940A576",
    "lastKnownWriteTime" : 1474879876,
    "last_content_update" : 1474879876,
    "path" : "~/Repos/geneontology/code/helperFunctions.R",
    "project_path" : "helperFunctions.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}